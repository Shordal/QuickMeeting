{"version":3,"sources":["images/OTSBanner.svg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","notesReducer","state","action","type","notes","title","body","filter","note","Note","removeNote","useEffect","console","log","className","onClick","ReactDOM","render","document","useReducer","dispatch","useState","setTitle","setBody","JSON","parse","localStorage","getItem","setItem","stringify","src","OTSBanner","alt","map","key","onSubmit","e","preventDefault","value","onChange","target","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,uC,8ICYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCZAC,EAAe,SAACC,EAAOC,GACrB,OAAQA,EAAOC,MACX,IAAK,iBACD,OAAOD,EAAOE,MAClB,IAAK,WACD,MAAM,GAAN,mBAEOH,GAFP,CAII,CAAEI,MAAOH,EAAOG,MAAOC,KAAMJ,EAAOI,QAE5C,IAAK,cACD,OAAOL,EAAMM,QAAO,SAACC,GAAD,OAAUA,EAAKH,QAAUH,EAAOG,SACxD,QACI,OAAOJ,IAyEjBQ,EAAO,SAAC,GAA0B,IAAxBD,EAAuB,EAAvBA,KAAME,EAAiB,EAAjBA,WAOd,OANAC,qBAAU,WAEN,OADAC,QAAQC,IAAI,4BACL,WACHD,QAAQC,IAAI,gCAEjB,IAEC,yBAAKC,UAAU,gBAAf,mCACA,4BAAKN,EAAKH,OADV,mCAEA,2BAAIG,EAAKF,MAFT,mCAGA,4BAAQQ,UAAU,cAAcC,QAAS,kBAAML,EAAWF,EAAKH,SAA/D,KAHA,qBAQZW,IAASC,OAAO,mBArFK,WACjBC,SAASb,MAAQ,0BADM,MAIOc,qBAAWnB,EAAc,IAJhC,mBAIZI,EAJY,KAILgB,EAJK,OAMGC,mBAAS,IANZ,mBAMhBhB,EANgB,KAMTiB,EANS,OAOCD,mBAAS,IAPV,mBAOhBf,EAPgB,KAOViB,EAPU,KA4BvBZ,qBAAU,WACNC,QAAQC,IAAI,6BACZ,IAAMT,EAAQoB,KAAKC,MAAMC,aAAaC,QAAQ,UAC1CvB,GACAgB,EAAS,CAAEjB,KAAM,iBAAkBC,YAGxC,IAEH,IAAMM,EAAa,SAACL,GAEZe,EAAS,CACLjB,KAAM,cACNE,WAQZ,OAJAM,qBAAU,WACNe,aAAaE,QAAQ,QAASJ,KAAKK,UAAUzB,MAC9C,CAACA,IAGA,yBAAKU,UAAU,WACX,yBAAKgB,IAAKC,IAAWjB,UAAU,WAAWkB,IAAI,cAG7C5B,EAAM6B,KAAI,SAACzB,GAAD,OACP,kBAAC,EAAD,CAAM0B,IAAK1B,EAAKH,MAAOG,KAAMA,EAAME,WAAYA,OAEnD,yBAAKI,UAAU,uBACf,0CACA,0BAAMA,UAAU,yBAAyBqB,SAlDjC,SAACC,GACbA,EAAEC,iBACFjB,EAAS,CACOjB,KAAM,WACNE,QACAC,SAShBgB,EAAS,IACTC,EAAQ,MAoCA,2BAAOT,UAAU,gBAAgBwB,MAAOjC,EAAOkC,SAAU,SAACH,GAAD,OAAOd,EAASc,EAAEI,OAAOF,UAClF,8BAAUxB,UAAU,gBAAgBwB,MAAOhC,EAAMiC,SAAU,SAACH,GAAD,OAAOb,EAAQa,EAAEI,OAAOF,UACnF,4BAAQxB,UAAU,UAAlB,oBAuBA,MAAkBI,SAASuB,eAAe,SDoBpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6a87b3b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/OTSBanner.e1ff66e1.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, useEffect, useReducer } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport OTSBanner from './images/OTSBanner.svg';\n\nconst notesReducer = (state, action) => {\n        switch (action.type) {\n            case 'POPULATE_NOTES':\n                return action.notes\n            case 'ADD_NOTE':\n                return [\n                    // coppies the exsisting objects to the array\n                    ...state,\n                    // below adds an object with the title and body of a note\n                    { title: action.title, body: action.body }\n                ]\n            case 'REMOVE_NOTE':\n                return state.filter((note) => note.title !== action.title )\n            default:\n                return state\n        }\n    }\n\nconst QuickMeeting = () => {\n    document.title = 'Lone Star Quick Meeting'\n        //const [notes, setNotes] = useState([])\n        // below is more complex useState\n        const [notes, dispatch] = useReducer(notesReducer, [])\n        // simple State use\n    const [title, setTitle] = useState('')\n    const [body, setBody] = useState('')\n\n    const addNote = (e) => {\n        e.preventDefault()\n        dispatch({\n                        type: 'ADD_NOTE',\n                        title,\n                        body\n                    })\n                    // setNotes([\n                    //     ...notes,\n                    //     { \n                    //     title,\n                    //     body \n                    //     }\n                    // ])\n        setTitle('')\n        setBody('')\n    }\n\n        // fetching data from a database\n    useEffect(() => {\n        console.log('Fetching local data')\n        const notes = JSON.parse(localStorage.getItem('notes'))\n        if (notes) {\n            dispatch({ type: 'POPULATE_NOTES', notes })\n            // setNotes(notesData)\n        }\n    }, [])\n\n    const removeNote = (title) => {\n            // setNotes(notes.filter((note) => note.title !== title))\n            dispatch({\n                type: 'REMOVE_NOTE',\n                title\n            })\n        }\n\n    useEffect(() => {\n        localStorage.setItem('notes', JSON.stringify(notes))\n    }, [notes])\n\n    return (\n        <div className=\"NoteApp\">\n            <img src={OTSBanner} className=\"App-logo\" alt=\"OTSBanner\" />\n            {/* <h1 className=\"NoteApp-header\">Lone Star College</h1>\n            <h1 className=\"NoteApp-header\">Tomball</h1> */}\n            {notes.map((note) => (\n                <Note key={note.title} note={note} removeNote={removeNote}/>\n            ))}\n            <div className=\"NoteApp-inputheader\"> \n            <p>Add Content</p>\n            <form className=\"NoteApp-inputcontainer\" onSubmit={addNote}>\n                <input className=\"NoteApp-input\" value={title} onChange={(e) => setTitle(e.target.value)} />\n                <textarea className=\"NoteApp-input\" value={body} onChange={(e) => setBody(e.target.value)}></textarea>\n                <button className=\"Button\">Add Content</button>\n            </form>\n            </div>\n        </div>\n    )\n}\n\nconst Note = ({ note, removeNote }) => {\n        useEffect(() => {\n            console.log('Setting up effect!')\n            return () => {\n                console.log('Cleaning up effect!')\n            }\n        }, [])\n        return (\n            <div className=\"NoteApp-note\">\n            <h3>{note.title}</h3>\n            <p>{note.body}</p>\n            <button className=\"Button-body\" onClick={() => removeNote(note.title)}>X</button>\n        </div>\n        )\n    }\n\nReactDOM.render(<QuickMeeting />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}