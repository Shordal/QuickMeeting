{"version":3,"sources":["serviceWorker.js","index.js","images/OTS-Banner.svg"],"names":["Boolean","window","location","hostname","match","notesReducer","state","action","type","notes","title","body","filter","note","hideContentReducer","visable","InputArea","setVisableToggle","setTitle","setBody","addNote","className","onSubmit","value","onChange","e","target","placeholder","onClick","Note","removeNote","useEffect","ReactDOM","render","document","useReducer","dispatch","useState","setVisable","JSON","parse","localStorage","getItem","setItem","stringify","fs","useFullScreen","src","OTSBanner","alt","map","key","preventDefault","toggle","fullScreen","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c887cd3c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, useEffect, useReducer } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from 'serviceWorker';\nimport 'index.css';\nimport OTSBanner from 'images/OTS-Banner.svg';\nimport { useFullScreen } from 'react-browser-hooks'\n\nconst notesReducer = (state, action) => {\n    switch (action.type) {\n        case 'POPULATE_NOTES':\n            return action.notes\n        case 'ADD_NOTE':\n            return [\n                // coppies the exsisting objects to the array\n                ...state,\n                // below adds an object with the title and body of a note\n                { title: action.title, body: action.body }\n            ]\n        case 'REMOVE_NOTE':\n            return state.filter((note) => note.title !== action.title)\n        default:\n            return state\n    }\n}\n\nconst hideContentReducer = (state, action) => {\n    switch (action.type) {\n        case 'HIDE':\n            return action.visable = false\n\n        case 'SHOW':\n            return { visable: true }\n        case 'TOGGLE':\n            return action.visable ? false : true\n        default:\n            return state\n    }\n}\n\nconst QuickMeeting = () => {\n    document.title = 'Lone Star Quick Meeting'\n    //const [notes, setNotes] = useState([])\n    // below is more complex useState\n    const [notes, dispatch] = useReducer(notesReducer, [])\n    // simple State use\n    const [title, setTitle] = useState('')\n    const [body, setBody] = useState('')\n    const [visable, setVisable] = useReducer(hideContentReducer, true)\n    // const [toggleClick, setToggle] = useState(true)\n\n    const addNote = (e) => {\n        e.preventDefault()\n        dispatch({\n            type: 'ADD_NOTE',\n            title,\n            body\n        })\n        // setNotes([\n        //     ...notes,\n        //     { \n        //     title,\n        //     body \n        //     }\n        // ])\n        setTitle('')\n        setBody('')\n    }\n\n    // fetching data from a database\n    useEffect(() => {\n        // console.log('Fetching local data')\n        const notes = JSON.parse(localStorage.getItem('notes'))\n        if (notes) {\n            dispatch({ type: 'POPULATE_NOTES', notes })\n            // setNotes(notesData)\n        }\n    }, [])\n\n    useEffect(() => {\n        // console.log('hide or not init load')\n        const visable = JSON.parse(localStorage.getItem('visable'))\n        if (visable) {\n            dispatch({ type: 'SHOW', visable })\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('visable', JSON.stringify(visable))\n    }, [visable])\n\n\n    // const setVisableHide = (visable) => {\n    //             console.log('Hide')\n    //     setVisable({\n    //         type: 'HIDE',\n    //         visable\n    //     })\n    // }\n\n    // const setVisableShow = (visable) => {\n    //             console.log('show')\n    //     setVisable({\n    //         type: 'SHOW',\n    //         visable\n    //     })\n    // }\n    const setVisableToggle = (visable) => {\n        // console.log('Toggle')\n        setVisable({\n            type: 'TOGGLE',\n            visable\n        })\n    }\n    \n    const removeNote = (title) => {\n        // setNotes(notes.filter((note) => note.title !== title))\n        dispatch({\n            type: 'REMOVE_NOTE',\n            title\n        })\n    }\n\n    useEffect(() => {\n        localStorage.setItem('notes', JSON.stringify(notes))\n    }, [notes])\n\n    const fs = useFullScreen()\n\n    return (\n        <div>\n        <div className=\"NoteApp\">\n            <img src={OTSBanner} className=\"App-logo\" alt=\"OTSBanner\" />\n            {/* <h1 className=\"NoteApp-header\">Lone Star College</h1>\n            <h1 className=\"NoteApp-header\">Tomball</h1> */}\n            {notes.map((note) => (\n                <Note \n                key={note.title} \n                note={note} \n                removeNote={removeNote} \n                />\n            ))}\n            <div >\n                {/* <form className=\"NoteApp-inputcontainer\" onSubmit={addNote}>\n                <input className=\"NoteApp-input\" value={title} onChange={(e) => setTitle(e.target.value)} />\n                <textarea className=\"NoteApp-input\" value={body} onChange={(e) => setBody(e.target.value)}></textarea>\n                <button className=\"Button\">Add Content</button>\n            </form> */}\n                <InputArea \n                key='9' \n                title={title} \n                body={body} \n                visable={visable} \n                setVisableToggle={setVisableToggle} \n                setTitle={setTitle} \n                setBody={setBody} \n                addNote={addNote} \n                />\n            </div>\n        </div>\n        <div className=\"NoteApp-bottom-left \">\n            <button \n            className=\"Button--fullScreen\" \n            onClick={fs.toggle}>\n                {fs.fullScreen ? 'Exit FullScreen' : 'FullScreen'}\n            </button>\n            </div>\n        </div>\n    )\n}\n\nconst InputArea = ({ \n    setVisableToggle, \n    visable, \n    body, \n    setTitle, \n    setBody, \n    addNote, \n    title }) => {\n    // useEffect(() => {\n\n    // }, [])\n    return (\n        <div className={\"NoteApp-hide\"}>\n            {visable &&\n                <p className={\"NoteApp-inputheader\"}>Add Content</p>\n            }\n\n            {visable &&\n                <form className=\"NoteApp-inputcontainer\" onSubmit={addNote}>\n                    <input className=\"NoteApp-input\" value={title} onChange={(e) => \n                        setTitle(e.target.value)} \n                        placeholder=\"Title\"\n                        />\n                    <textarea className=\"NoteApp-input\" value={body} onChange={(e) => \n                        setBody(e.target.value)}\n                        placeholder=\"Body\"\n                        />\n                    <div className=\"Button__center\">\n\n                        <button className=\"Button\" onClick={() => { \n                            setVisableToggle(visable) \n                            }}>{visable ? 'Hide' : 'Show'}</button>\n\n\n                        <button className=\"Button\">Add Content</button>\n\n                    </div>\n                </form>\n            }\n            {/* <h1 key=\"3\">{visable ? <h1>Test area</h1> : ''}</h1>\n            <p key=\"2\">{visable ? <p>!!Test area!!</p> : ''}</p> */}\n            {/* <button\n            onClick={() => setToggle(toggleClick ? false : true)}>\n                {toggleClick ? 'Hide' : 'Show'}\n            </button> */}\n            <div className=\"NoteApp-bottom\">\n                {!visable &&\n                    <div className=\"NoteApp-hide\">\n                        {/* <p className={\"NoteApp-inputheader\"}>Add Content</p> */}\n\n                        <button className=\"Button\" onClick={() => { \n                            setVisableToggle(visable) \n                            }}>{visable ? 'Hide' : 'Add Content'}</button>\n                    </div>\n                }\n            </div>\n        </div>\n    )\n}\n\nconst Note = ({ note, removeNote }) => {\n    useEffect(() => {\n        // console.log('Setting up effect!')\n        return () => {\n            // console.log('Cleaning up effect!')\n        }\n    }, [])\n    return (\n        <div className=\"NoteApp-note\">\n            <h3 className=\"NoteApp-note-text\">{note.title}</h3>\n            <p className=\"NoteApp-note-text\">{note.body}</p>\n            <button className=\"Button-body\" onClick={() => \n                removeNote(note.title)}>X</button>\n        </div>\n    )\n}\n\nReactDOM.render(<QuickMeeting />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/OTS-Banner.a81e6ec6.svg\";"],"sourceRoot":""}